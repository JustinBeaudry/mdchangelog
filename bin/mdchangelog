#!/usr/bin/env node

'use strict';

var util = require('util');
var argv = require('minimist')(process.argv.slice(2));
var MDchangelog = require('..');

if(argv.version) {
  return util.puts(require('../package.json').version);
}
if(argv.help){
  var help = []
    .concat('MDchangelog ' + require('../package.json').version)
    .concat('')
    .concat('Generate markdown formatted changelogs for a git revision selection')
    .concat('showing referenced issues and milestones from github')
    .concat('')
    .concat('example usage:')
    .concat('mdchangelog HEAD...66c248f')
    .concat('');
  return util.puts(help.join('\n'));
}
if(!process.env.MDCHANGELOG_TOKEN){
  return util.error('Missing github oauth token at env.MDCHANGELOG_TOKEN');
}
var changelog = new MDchangelog();
changelog(argv._[0], function(err, log){

  if(err) {
    return util.puts(err);
  }
  util.puts(log.summary.release);
  util.puts(log.summary.desc);
  util.puts('');
  if(log.milestones.length){
    util.puts('## Milestones');
    util.puts(log.milestones.join('\n'));
    util.puts('');
  }
  if(log.issues.length){
    util.puts('### Issues');
    util.puts(log.issues.join('\n'));
    util.puts('');
  }
  if(log.commits.length && argv.commits) {
    util.puts('### Commits');
    util.puts(log.commits.join('\n'));
    util.puts('');
  }
});
