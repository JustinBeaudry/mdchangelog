#!/usr/bin/env node
/*eslint no-process-exit:0 */

'use strict';

var util = require('util');
var argv = require('minimist')(process.argv.slice(2));
var MDchangelog = require('..');

if(argv.version) {
  util.puts(require('../package.json').version);
  process.exit();
}
if(argv.help || argv.h || argv['?']){
  var help = []
    .concat('MDchangelog ' + require('../package.json').version)
    .concat('')
    .concat('Generate markdown formatted changelogs for a git revision selection')
    .concat('showing referenced issues and milestones from github')
    .concat('')
    .concat('Usage: (inside of a git repo)')
    .concat('mdchangelog')
    .concat('')
    .concat('By default, mdchangelog will prepend to an existing `CHANGELOG.md`')
    .concat('using the git sha from the *last release entry* in the changelog.')
    .concat('You can override this behaviour by passing a git revision selection:')
    .concat('mdchangelog HEAD...66c248f')
    .concat('')
    .concat('Options:')
    .concat('--cwd <path> path to git repo, defaults to $PWD')
    .concat('--regenerate rebuild the entire changelog')
    .concat('--overwrite overwrite CHANGELOG.md in place, instead of prepending (implies regenerate)')
    .concat('--no-prologue disable prologue text')
    .concat('--no-orphan-issues ignore issues without a milestone')
    .concat('--timeout <int> timeout value in ms for github requests')
    .concat('--order-issues <order> order issues by one of [number,opened_at,updated_at,closed_at]')
    .concat('--reverse-issues reverse the order of issues')
    .concat('--order-milestones <order> order issues by one of [number,opened_at,updated_at,title,semver]')
    .concat('--reverse-milestones reverse the ordering of milestones')
    .concat('--remote <github/repo> override git config remote repo to pull issues from')
    .concat('--stdout send output to stdout instead of writing to file (implies regenerate)');
  util.puts(help.join('\n'));
  process.exit();
}
if(!process.env.MDCHANGELOG_TOKEN){
  util.error('Missing github oauth token at env.MDCHANGELOG_TOKEN');
  process.exit();
}
var changelog = new MDchangelog(argv);
changelog(function(err, log){
  if(err) {
    util.error('error: ' + err);
    process.exit(1);
  }
});
